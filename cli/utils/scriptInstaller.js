const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

async function installDeployScript(projectInfo, options = {}) {
  const projectPath = process.cwd();
  
  // Download deploy script
  const deployScriptPath = path.join(__dirname, '../../scripts/deploy.sh');
  const targetPath = path.join(projectPath, 'deploy.sh');
  
  // Copy deploy script
  fs.copyFileSync(deployScriptPath, targetPath);
  fs.chmodSync(targetPath, '755');
  
  // Create .deploy.config
  const config = generateDeployConfig(projectInfo);
  fs.writeFileSync(path.join(projectPath, '.deploy.config'), config);
  
  // Update package.json
  updatePackageJson(projectPath, projectInfo);
  
  // Update .gitignore
  updateGitignore(projectPath);
  
  // Create DEPLOY.md documentation
  createDeployDoc(projectPath, projectInfo);
}

function generateDeployConfig(projectInfo) {
  let config = `# Karma Deploy Configuration
# Generated by karma-deploy CLI

# Service Configuration
SERVICE_NAME="${projectInfo.name}"
SERVICE_TYPE="${projectInfo.deployment}"
`;

  if (projectInfo.deployment === 'kubernetes') {
    config += `
# Kubernetes Configuration
K8S_DIR="kubernetes"
KUSTOMIZE_ENABLED="true"
`;
  }

  if (projectInfo.features.graphql) {
    config += `
# GraphQL Configuration
HAS_GRAPHQL="true"
`;
    if (projectInfo.name.includes('merchant')) {
      config += `APOLLO_GRAPH="karma-merchant"
APOLLO_SUBGRAPH="Base"
`;
    }
  }

  if (projectInfo.staging) {
    config += `
# Staging Environment
HAS_STAGING="true"
`;
  }

  config += `
# Build Configuration
NODE_VERSION="${getNodeVersion(projectInfo)}"
`;

  if (projectInfo.features.docker) {
    config += `DOCKER_BUILD="true"
`;
  }

  return config;
}

function getNodeVersion(projectInfo) {
  if (projectInfo.packageJson?.engines?.node) {
    const match = projectInfo.packageJson.engines.node.match(/(\d+)/);
    if (match) return match[1];
  }
  
  // Defaults based on project type
  if (projectInfo.type === 'nextjs') return '20';
  if (projectInfo.type === 'gatsby') return '18';
  return '18';
}

function updatePackageJson(projectPath, projectInfo) {
  const packageJsonPath = path.join(projectPath, 'package.json');
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  
  // Add deploy scripts
  if (!packageJson.scripts) {
    packageJson.scripts = {};
  }
  
  packageJson.scripts.deploy = 'bash deploy.sh';
  packageJson.scripts['deploy:dev'] = 'bash deploy.sh dev';
  packageJson.scripts['deploy:prod'] = 'bash deploy.sh prod';
  
  if (projectInfo.staging) {
    packageJson.scripts['deploy:staging'] = 'bash deploy.sh staging';
  }
  
  // Write back formatted JSON
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\n');
}

function updateGitignore(projectPath) {
  const gitignorePath = path.join(projectPath, '.gitignore');
  
  if (!fs.existsSync(gitignorePath)) {
    fs.writeFileSync(gitignorePath, '');
  }
  
  const gitignore = fs.readFileSync(gitignorePath, 'utf8');
  const linesToAdd = [];
  
  if (!gitignore.includes('.deploy.config.local')) {
    linesToAdd.push('.deploy.config.local');
  }
  
  if (linesToAdd.length > 0) {
    fs.appendFileSync(gitignorePath, '\n# Karma Deploy\n' + linesToAdd.join('\n') + '\n');
  }
}

function createDeployDoc(projectPath, projectInfo) {
  const doc = `# Deployment Guide

This project uses the Karma unified deployment system.

## Quick Deploy

\`\`\`bash
# Deploy to development
npm run deploy:dev

# Deploy to production
npm run deploy:prod
${projectInfo.staging ? '\n# Deploy to staging\nnpm run deploy:staging' : ''}
\`\`\`

## GitHub Actions

Deployments are automatically triggered by pushing version tags:

\`\`\`bash
# Deploy to development
git tag v1.0.0-dev
git push --tags

# Deploy to production
git tag v1.0.0
git push --tags
${projectInfo.staging ? '\n\n# Deploy to staging\ngit tag v1.0.0-staging\ngit push --tags' : ''}
\`\`\`

## Configuration

- \`.deploy.config\` - Main configuration file
- \`.deploy.config.local\` - Local overrides (not committed)

## Troubleshooting

Run \`karma update\` to update deployment scripts to the latest version.
`;

  fs.writeFileSync(path.join(projectPath, 'DEPLOY.md'), doc);
}

module.exports = {
  installDeployScript
};