name: Deploy to Kubernetes

on:
  workflow_call:
    inputs:
      service-name:
        description: 'Service name in GitOps repo'
        type: string
        required: true
      environment:
        description: 'Deployment environment'
        type: string
        required: true
      image-tag:
        description: 'Docker image tag to deploy'
        type: string
        required: true
      image-url:
        description: 'Full Docker image URL'
        type: string
        required: true
      gitops-repo:
        description: 'GitOps repository'
        type: string
        required: false
        default: 'karmadev/gitops'
      version:
        description: 'Version number for deployment summary'
        type: string
        required: false
    secrets:
      GITOPS_TOKEN:
        description: 'GitHub token for GitOps repo'
        required: true
      SLACK_WEBHOOK_URL:
        description: 'Slack webhook URL for notifications'
        required: false

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.gitops-repo }}
          token: ${{ secrets.GITOPS_TOKEN }}
          ref: master
          path: gitops
      
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITOPS_TOKEN }}
          path: source
      
      - name: Copy Kubernetes configs from source to GitOps
        run: |
          ENV="${{ inputs.environment }}"
          SERVICE_NAME="${{ inputs.service-name }}"
          
          echo "Copying Kubernetes configs from source repo to GitOps..."
          
          # Check if source has kubernetes configs
          if [ -d "source/kubernetes/overlays/$ENV" ]; then
            echo "Found kubernetes configs in source/kubernetes/overlays/$ENV"
            
            # Create service directory in GitOps if it doesn't exist
            mkdir -p "gitops/$SERVICE_NAME/$ENV"
            
            # Copy all files from source kubernetes overlay to GitOps
            cp -r source/kubernetes/overlays/$ENV/* "gitops/$SERVICE_NAME/$ENV/" || true
            
            # Also copy base configs if they exist and we're copying overlays
            if [ -d "source/kubernetes/base" ]; then
              echo "Found base configs, copying to GitOps..."
              mkdir -p "gitops/$SERVICE_NAME/base"
              cp -r source/kubernetes/base/* "gitops/$SERVICE_NAME/base/" || true
            fi
            
            echo "âœ“ Copied Kubernetes configs from source to GitOps"
          else
            echo "No kubernetes configs found in source/kubernetes/overlays/$ENV, using existing GitOps configs"
          fi
      
      - name: Update Kubernetes manifests
        run: |
          ENV="${{ inputs.environment }}"
          IMAGE_TAG="${{ inputs.image-tag }}"
          SERVICE_NAME="${{ inputs.service-name }}"
          IMAGE_URL="${{ inputs.image-url }}"
          
          cd gitops
          
          # Check if service directory exists
          if [ ! -d "$SERVICE_NAME" ]; then
            echo "::error::Directory $SERVICE_NAME does not exist in gitops repo"
            echo "Available directories:"
            ls -d */ 2>/dev/null || echo "No directories found"
            exit 1
          fi
          
          cd "$SERVICE_NAME"
          
          # Navigate to environment directory
          if [ ! -d "$ENV" ]; then
            echo "::error::Environment directory '$ENV' not found in $SERVICE_NAME"
            echo "Available directories:"
            ls -d */ 2>/dev/null || echo "No directories found"
            exit 1
          fi
          
          cd "$ENV"
          
          # Update kustomization.yaml if it exists
          if [ -f "kustomization.yaml" ]; then
            echo "Updating kustomization.yaml with new image tag: ${IMAGE_TAG}"
            
            # Update the newTag field
            if grep -q "newTag:" kustomization.yaml; then
              sed -i "s|newTag: .*|newTag: ${IMAGE_TAG}|" kustomization.yaml
            elif grep -q "- name:" kustomization.yaml; then
              # Kustomize images section format
              sed -i "/- name:.*${SERVICE_NAME}/,/newTag:/ s|newTag: .*|newTag: ${IMAGE_TAG}|" kustomization.yaml
            fi
          fi
          
          # Update deployment files directly
          for file in deployment.yaml deployment.yml app.yaml app.yml; do
            if [ -f "$file" ]; then
              echo "Updating $file with new image"
              sed -i "s|image: .*${SERVICE_NAME}:.*|image: ${IMAGE_URL}|g" "$file"
            fi
          done
      
      - name: Commit and push changes
        run: |
          cd gitops
          
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          ENV="${{ inputs.environment }}"
          IMAGE_TAG="${{ inputs.image-tag }}"
          SERVICE_NAME="${{ inputs.service-name }}"
          
          git add -A
          git commit -m "Deploy ${SERVICE_NAME} to ${ENV} - ${IMAGE_TAG}
          
          Updated Kubernetes configs from source repository and image tag to ${IMAGE_TAG}
          
          ðŸ¤– Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>" || echo "No changes to commit"
          git push
      
      - name: Wait for ArgoCD sync
        run: |
          echo "ArgoCD will automatically sync the changes within 3 minutes"
          echo "You can manually sync in ArgoCD UI if needed for immediate deployment"
      
      - name: Deployment Summary
        run: |
          ENV="${{ inputs.environment }}"
          IMAGE_TAG="${{ inputs.image-tag }}"
          VERSION="${{ inputs.version }}"
          SERVICE_NAME="${{ inputs.service-name }}"
          
          echo "## ðŸŽ‰ Deployment Initiated Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details:" >> $GITHUB_STEP_SUMMARY
          if [ -n "$VERSION" ]; then
            echo "- **Version:** \`${VERSION}\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Environment:** \`${ENV}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Service:** ${SERVICE_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** \`${IMAGE_TAG}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** \`${GITHUB_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. ArgoCD will sync within 3 minutes" >> $GITHUB_STEP_SUMMARY
          echo "2. Check deployment status in ArgoCD" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify service health after deployment" >> $GITHUB_STEP_SUMMARY
      
      - name: Send Slack Notification
        if: success()
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "ðŸš€ Deployment Successful",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "ðŸš€ ${{ inputs.service-name }} Deployed to ${{ inputs.environment }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Service:*\n${{ inputs.service-name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\n${{ inputs.environment }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Version:*\n${{ inputs.version || inputs.image-tag }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Deployed by:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit:* <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\n*Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}