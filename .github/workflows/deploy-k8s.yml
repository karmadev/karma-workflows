name: Deploy to Kubernetes

on:
  workflow_call:
    inputs:
      service-name:
        description: 'Service name in GitOps repo'
        type: string
        required: true
      environment:
        description: 'Deployment environment'
        type: string
        required: true
      image-tag:
        description: 'Docker image tag to deploy'
        type: string
        required: true
      image-url:
        description: 'Full Docker image URL (including tag)'
        type: string
        required: true
      gitops-repo:
        description: 'GitOps repository'
        type: string
        required: false
        default: 'karmadev/gitops'
      gitops-branch:
        description: 'Branch in GitOps repo'
        type: string
        required: false
        default: 'master'
      version:
        description: 'Version number for deployment summary'
        type: string
        required: false
    secrets:
      GITOPS_TOKEN:
        description: 'GitHub token for GitOps repo'
        required: true
      SLACK_WEBHOOK_URL:
        description: 'Slack webhook URL for notifications'
        required: false

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ inputs.gitops-repo }}
          token: ${{ secrets.GITOPS_TOKEN }}
          ref: ${{ inputs.gitops-branch }}
      
      - name: Update Kubernetes manifests
        run: |
          ENV="${{ inputs.environment }}"
          IMAGE_TAG="${{ inputs['image-tag'] }}"
          SERVICE_NAME="${{ inputs['service-name'] }}"
          IMAGE_URL="${{ inputs['image-url'] }}"
          
          # Check if service directory exists
          if [ ! -d "$SERVICE_NAME" ]; then
            echo "::error::Directory $SERVICE_NAME does not exist in gitops repo"
            echo "Available directories:"
            ls -d */ 2>/dev/null || echo "No directories found"
            exit 1
          fi
          
          cd "$SERVICE_NAME"
          
          # Navigate to environment directory
          if [ ! -d "$ENV" ]; then
            echo "::error::Environment directory '$ENV' not found in $SERVICE_NAME"
            echo "Available directories:"
            ls -d */ 2>/dev/null || echo "No directories found"
            exit 1
          fi
          
          cd "$ENV"
          
          # Update kustomization.yaml if it exists
          if [ -f "kustomization.yaml" ]; then
            echo "Updating kustomization.yaml with new image tag: ${IMAGE_TAG}"
            
            # Update the newTag field
            if grep -q "newTag:" kustomization.yaml; then
              sed -i "s|newTag: .*|newTag: ${IMAGE_TAG}|" kustomization.yaml
            elif grep -q "- name:" kustomization.yaml; then
              # Kustomize images section format
              sed -i "/- name:.*${SERVICE_NAME}/,/newTag:/ s|newTag: .*|newTag: ${IMAGE_TAG}|" kustomization.yaml
            fi
          fi
          
          # Update deployment files directly
          for file in deployment.yaml deployment.yml app.yaml app.yml manifest.yaml; do
            if [ -f "$file" ]; then
              echo "Updating $file with new image for service ${SERVICE_NAME}"
              # Only update images that contain the service name (preserve pgexec and other images)
              sed -i "s|image: .*${SERVICE_NAME}[^[:space:]]*|image: ${IMAGE_URL}|g" "$file"
              # Also handle empty image field immediately after the main service container name
              sed -i "/name: ${SERVICE_NAME}/,/image:/ { /image: *$/s|image: *$|image: ${IMAGE_URL}|; }" "$file"
            fi
          done

      - name: Commit and push changes
        run: |
          set -euo pipefail
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          ENV="${{ inputs.environment }}"
          IMAGE_URL="${{ inputs['image-url'] }}"
          SERVICE_NAME="${{ inputs['service-name'] }}"
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          DEPLOYER="${{ github.actor }}"

          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "${SERVICE_NAME}: ${ENV}, GitHub Actions build at ${SHORT_SHA}, by: ${DEPLOYER} image: ${IMAGE_URL}"
          git push

      - name: Deployment Summary
        run: |
          ENV="${{ inputs.environment }}"
          IMAGE_TAG="${{ inputs['image-tag'] }}"
          VERSION="${{ inputs.version }}"
          SERVICE_NAME="${{ inputs['service-name'] }}"
          echo "## ðŸŽ‰ Deployment Initiated Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details:" >> $GITHUB_STEP_SUMMARY
          if [ -n "${VERSION:-}" ]; then
            echo "- **Version:** \`${VERSION}\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Environment:** \`${ENV}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Service:** ${SERVICE_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** \`${IMAGE_TAG}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** \`${GITHUB_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. If ArgoCD is auto-sync, it will reconcile shortly." >> $GITHUB_STEP_SUMMARY
          echo "2. Otherwise, manually sync in ArgoCD and watch health." >> $GITHUB_STEP_SUMMARY

      - name: Send Slack Notification
        if: success()
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "ðŸš€ Deployment Successful",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "ðŸš€ ${{ inputs.service-name }} Deployed to ${{ inputs.environment }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    { "type": "mrkdwn", "text": "*Service:*\n${{ inputs.service-name }}" },
                    { "type": "mrkdwn", "text": "*Environment:*\n${{ inputs.environment }}" },
                    { "type": "mrkdwn", "text": "*Version:*\n${{ inputs.version || inputs.image-tag }}" },
                    { "type": "mrkdwn", "text": "*Deployed by:*\n${{ github.actor }}" }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit:* <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\n*Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
