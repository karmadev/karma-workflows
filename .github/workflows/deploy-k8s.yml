name: Deploy to Kubernetes

on:
  workflow_call:
    inputs:
      service-name:
        description: 'Service name in GitOps repo'
        type: string
        required: true
      environment:
        description: 'Deployment environment'
        type: string
        required: true
      image-tag:
        description: 'Docker image tag to deploy'
        type: string
        required: true
      image-url:
        description: 'Full Docker image URL'
        type: string
        required: true
      gitops-repo:
        description: 'GitOps repository'
        type: string
        required: false
        default: 'karmadev/gitops'
      version:
        description: 'Version number for deployment summary'
        type: string
        required: false
    secrets:
      GITOPS_TOKEN:
        description: 'GitHub token for GitOps repo'
        required: true
      SLACK_WEBHOOK_URL:
        description: 'Slack webhook URL for notifications'
        required: false

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Install kubectl and kustomize
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Install kustomize
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          
          # Verify installations
          kubectl version --client
          kustomize version

      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.gitops-repo }}
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops
      
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITOPS_TOKEN }}
          path: source
      
      - name: Deploy using Strategy A (kustomize inputs + ArgoCD builds)
        run: |
          ENV="${{ inputs.environment }}"
          SERVICE_NAME="${{ inputs.service-name }}"
          IMAGE_TAG="${{ inputs.image-tag }}"
          IMAGE_URL="${{ inputs.image-url }}"
          
          echo "Deploying $SERVICE_NAME to $ENV using Strategy A (like old Buildkite)"
          
          # Create service directory in GitOps if it doesn't exist
          mkdir -p "gitops/$SERVICE_NAME/$ENV"
          cd "gitops/$SERVICE_NAME/$ENV"
          
          # Strategy A: Commit kustomize inputs, let ArgoCD build and apply
          if [ -d "../../../source/kubernetes/overlays/$ENV" ]; then
            echo "Found kubernetes configs in source - copying kustomize inputs to gitops"
            
            # Copy the complete kustomize structure from source to gitops
            cp -r "../../../source/kubernetes/overlays/$ENV"/* .
            
            # Also copy base if it exists and is referenced
            if [ -d "../../../source/kubernetes/base" ] && grep -q "\.\.\/\.\.\/base" kustomization.yaml 2>/dev/null; then
              echo "Copying referenced base directory"
              mkdir -p "../../base"
              cp -r "../../../source/kubernetes/base"/* "../../base/"
            fi
            
            echo "âœ“ Copied kustomize inputs from source to gitops"
          else
            echo "No source kubernetes configs - updating existing gitops kustomization"
          fi
          
          # Extract image name from URL for kustomize edit
          IMAGE_NAME=$(echo "$IMAGE_URL" | sed 's/:.*$//')
          
          # Update image tag using kustomize edit (clean and safe)
          echo "Updating image tag: ${IMAGE_NAME}=${IMAGE_URL}"
          kustomize edit set image "${IMAGE_NAME}=${IMAGE_URL}"
          
          echo "âœ“ Updated image tags using kustomize edit (ArgoCD will build manifest)"
      
      - name: Commit and push changes
        run: |
          cd gitops
          
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          ENV="${{ inputs.environment }}"
          IMAGE_TAG="${{ inputs.image-tag }}"
          IMAGE_URL="${{ inputs.image-url }}"
          SERVICE_NAME="${{ inputs.service-name }}"
          
          # Match old Buildkite commit message format exactly
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          DEPLOYER="${{ github.actor }}"
          
          git add -A
          git commit -m "${SERVICE_NAME}: ${ENV}, GitHub Actions build at ${SHORT_SHA}, by: ${DEPLOYER}

image: ${IMAGE_URL}" || echo "No changes to commit"
          git push
      
      - name: Wait for ArgoCD sync
        run: |
          echo "ArgoCD will automatically sync the changes within 3 minutes"
          echo "You can manually sync in ArgoCD UI if needed for immediate deployment"
      
      - name: Deployment Summary
        run: |
          ENV="${{ inputs.environment }}"
          IMAGE_TAG="${{ inputs.image-tag }}"
          VERSION="${{ inputs.version }}"
          SERVICE_NAME="${{ inputs.service-name }}"
          
          echo "## ðŸŽ‰ Deployment Initiated Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details:" >> $GITHUB_STEP_SUMMARY
          if [ -n "$VERSION" ]; then
            echo "- **Version:** \`${VERSION}\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Environment:** \`${ENV}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Service:** ${SERVICE_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** \`${IMAGE_TAG}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** \`${GITHUB_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. ArgoCD will sync within 3 minutes" >> $GITHUB_STEP_SUMMARY
          echo "2. Check deployment status in ArgoCD" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify service health after deployment" >> $GITHUB_STEP_SUMMARY
      
      - name: Send Slack Notification
        if: success() && env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "ðŸš€ Deployment Successful",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "ðŸš€ ${{ inputs.service-name }} Deployed to ${{ inputs.environment }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Service:*\n${{ inputs.service-name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\n${{ inputs.environment }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Version:*\n${{ inputs.version || inputs.image-tag }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Deployed by:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit:* <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\n*Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}