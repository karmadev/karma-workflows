name: Deploy to Firebase

on:
  workflow_call:
    inputs:
      project-id:
        description: 'Firebase project ID or alias (dev, prod, default)'
        type: string
        required: true
      environment:
        description: 'Deployment environment'
        type: string
        required: true
      working-directory:
        description: 'Working directory'
        type: string
        required: false
        default: '.'
      node-version:
        description: 'Node.js version'
        type: string
        required: false
        default: '18'
      build-command:
        description: 'Build command'
        type: string
        required: false
        default: ''
      build-command-dev:
        description: 'Build command for development'
        type: string
        required: false
        default: 'npm run build:dev'
      build-command-prod:
        description: 'Build command for production'
        type: string
        required: false
        default: 'npm run build'
      deploy-target:
        description: 'Firebase deploy target (hosting, functions, firestore, etc.)'
        type: string
        required: false
        default: 'hosting'
      hosting-target:
        description: 'Firebase hosting target name'
        type: string
        required: false
      hosting-target-dev:
        description: 'Firebase hosting target for development'
        type: string
        required: false
        default: 'dev'
      hosting-target-prod:
        description: 'Firebase hosting target for production'
        type: string
        required: false
        default: 'prod'
      version:
        description: 'Version number for deployment'
        type: string
        required: false
      env-file-additions:
        description: 'Additional environment variables to add (multiline string)'
        type: string
        required: false
        default: ''
      use-firebase-token:
        description: 'Use Firebase token instead of service account'
        type: boolean
        required: false
        default: false
    secrets:
      FIREBASE_SERVICE_ACCOUNT:
        description: 'Firebase service account key (from GCP_SA_KEY)'
        required: false
      FIREBASE_DEPLOY_TOKEN:
        description: 'Firebase deployment token'
        required: false
      NPM_TOKEN:
        description: 'NPM token for private packages'
        required: false
      SENTRY_AUTH_TOKEN:
        description: 'Sentry auth token for source maps'
        required: false
      SLACK_WEBHOOK_URL:
        description: 'Slack webhook URL for notifications'
        required: false

jobs:
  deploy:
    name: Deploy to Firebase (${{ inputs.environment }})
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json
      
      - name: Configure NPM for private packages
        run: |
          if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          else
            echo "No NPM token provided, continuing without private package access"
          fi
      
      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: |
          # Try npm ci first, fallback to legacy-peer-deps if needed
          npm ci --include=optional --prefer-offline --no-audit || npm ci --include=optional --prefer-offline --no-audit --legacy-peer-deps
      
      - name: Configure environment variables
        working-directory: ${{ inputs.working-directory }}
        run: |
          ENV="${{ inputs.environment }}"
          VERSION="${{ inputs.version }}"
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          # Determine env file
          if [[ "$ENV" == "production" ]]; then
            ENV_FILE=".env.production"
          elif [[ "$ENV" == "staging" ]]; then
            ENV_FILE=".env.staging"
          else
            ENV_FILE=".env.development"
          fi
          
          # Add standard variables
          if [ -f "$ENV_FILE" ]; then
            echo "" >> $ENV_FILE
            echo "REACT_APP_ENGINE_VERSION=${VERSION:-$SHORT_SHA}" >> $ENV_FILE
            echo "REACT_APP_SENTRY_ENVIRONMENT=${ENV}" >> $ENV_FILE
            echo "SENTRY_ENVIRONMENT=${ENV}" >> $ENV_FILE
            echo "SENTRY_RELEASE=${VERSION:-$SHORT_SHA}" >> $ENV_FILE
            
            # Add custom environment variables if provided
            if [ -n "${{ inputs.env-file-additions }}" ]; then
              echo "${{ inputs.env-file-additions }}" >> $ENV_FILE
            fi
            
            echo "Configured $ENV_FILE"
          fi
      
      - name: Build application
        working-directory: ${{ inputs.working-directory }}
        run: |
          ENV="${{ inputs.environment }}"
          export NODE_OPTIONS="--max-old-space-size=8192"

          # Verify Rollup installation before building
          if ! npm list rollup > /dev/null 2>&1; then
            echo "Rollup not found, reinstalling with optional dependencies..."
            npm install rollup --include=optional
          fi

          # Determine build command
          if [ -n "${{ inputs.build-command }}" ]; then
            BUILD_CMD="${{ inputs.build-command }}"
          elif [[ "$ENV" == "production" ]]; then
            BUILD_CMD="${{ inputs.build-command-prod }}"
          else
            BUILD_CMD="${{ inputs.build-command-dev }}"
          fi

          echo "Building with: $BUILD_CMD"
          eval $BUILD_CMD
      
      - name: Setup Firebase Authentication
        run: |
          if [[ "${{ inputs.use-firebase-token }}" == "true" ]]; then
            if [ -n "${{ secrets.FIREBASE_DEPLOY_TOKEN }}" ]; then
              echo "Using Firebase token authentication"
              echo "FIREBASE_TOKEN_AUTH=true" >> $GITHUB_ENV
            else
              echo "Error: Firebase token requested but FIREBASE_DEPLOY_TOKEN not provided"
              exit 1
            fi
          else
            # Check if service account is provided
            SERVICE_ACCOUNT='${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
            if [ ${#SERVICE_ACCOUNT} -gt 10 ]; then
              echo "$SERVICE_ACCOUNT" > /tmp/firebase-service-account.json
              echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/firebase-service-account.json" >> $GITHUB_ENV
              echo "Service account authentication configured"
            else
              echo "Warning: No service account provided"
            fi
          fi
      
      - name: Deploy to Firebase
        working-directory: ${{ inputs.working-directory }}
        run: |
          ENV="${{ inputs.environment }}"
          PROJECT="${{ inputs.project-id }}"
          
          # Debug: Check if .firebaserc exists and show its content
          if [ -f ".firebaserc" ]; then
            echo "Found .firebaserc file:"
            cat .firebaserc
          else
            echo "Warning: .firebaserc file not found!"
          fi
          
          # Determine hosting target
          if [ -n "${{ inputs.hosting-target }}" ]; then
            TARGET="${{ inputs.hosting-target }}"
          elif [[ "$ENV" == "production" ]]; then
            TARGET="${{ inputs.hosting-target-prod }}"
          else
            TARGET="${{ inputs.hosting-target-dev }}"
          fi
          
          # Build deploy command
          DEPLOY_CMD="npx firebase deploy --project $PROJECT"
          
          if [[ "${{ inputs.deploy-target }}" == "hosting" ]]; then
            DEPLOY_CMD="$DEPLOY_CMD --only hosting:$TARGET"
          else
            DEPLOY_CMD="$DEPLOY_CMD --only ${{ inputs.deploy-target }}"
          fi
          
          # Add authentication
          if [[ "$FIREBASE_TOKEN_AUTH" == "true" ]]; then
            DEPLOY_CMD="$DEPLOY_CMD --token '${{ secrets.FIREBASE_DEPLOY_TOKEN }}'"
            echo "Using Firebase token authentication"
            # Try to list projects with this token to debug access
            echo "Testing token access to Firebase projects..."
            npx firebase projects:list --token '${{ secrets.FIREBASE_DEPLOY_TOKEN }}' 2>&1 | head -20 || true
          elif [ -n "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
            echo "Using service account from $GOOGLE_APPLICATION_CREDENTIALS"
          else
            echo "Warning: No authentication method configured, deployment may fail"
          fi
          
          echo "Deploying with: $DEPLOY_CMD"
          eval $DEPLOY_CMD
      
      - name: Deploy Functions (if applicable)
        if: contains(inputs.deploy-target, 'functions')
        working-directory: ${{ inputs.working-directory }}
        run: |
          npm install -g firebase-tools
          firebase deploy --only functions --project ${{ inputs.project-id }}
      
      - name: Upload source maps to Sentry
        working-directory: ${{ inputs.working-directory }}
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          if [ -z "$SENTRY_AUTH_TOKEN" ]; then
            echo "No Sentry auth token provided, skipping source map upload"
            exit 0
          fi
          
          ENV="${{ inputs.environment }}"
          
          # Try different sentry upload commands based on what's available
          if npm run | grep -q "sentry:gen-source-maps"; then
            if [[ "$ENV" == "production" ]]; then
              npm run sentry:gen-source-maps || echo "Sentry upload failed, continuing..."
            else
              npm run sentry:gen-source-maps:dev || echo "Sentry upload failed, continuing..."
            fi
          elif npm run | grep -q "sentry:upload"; then
            npm run sentry:upload || echo "Sentry upload failed, continuing..."
          else
            echo "No Sentry upload script found, skipping"
          fi
      
      - name: Deployment Summary
        run: |
          ENV="${{ inputs.environment }}"
          PROJECT="${{ inputs.project-id }}"
          VERSION="${{ inputs.version }}"
          
          echo "## 🔥 Firebase Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details:" >> $GITHUB_STEP_SUMMARY
          if [ -n "$VERSION" ]; then
            echo "- **Version:** \`${VERSION}\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Environment:** \`${ENV}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Project:** ${PROJECT}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Target:** ${{ inputs.deploy-target }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA:** \`${GITHUB_SHA:0:8}\`" >> $GITHUB_STEP_SUMMARY
      
      - name: Send Slack Notification
        if: success()
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "🔥 Firebase Deployment Successful",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🔥 ${{ github.event.repository.name }} Deployed to Firebase",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n${{ inputs.project-id }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\n${{ inputs.environment }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Version:*\n${{ inputs.version || github.sha }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Deployed by:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Commit:* <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\n*Workflow:* <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}